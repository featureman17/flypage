1856: function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var r = a(9711)
          , n = a(3008);
        class i extends r.QueryObserver {
            constructor(e, t) {
                super(e, t)
            }
            bindMethods() {
                super.bindMethods(),
                this.fetchNextPage = this.fetchNextPage.bind(this),
                this.fetchPreviousPage = this.fetchPreviousPage.bind(this)
            }
            setOptions(e, t) {
                super.setOptions({
                    ...e,
                    behavior: n.infiniteQueryBehavior()
                }, t)
            }
            getOptimisticResult(e) {
                return e.behavior = n.infiniteQueryBehavior(),
                super.getOptimisticResult(e)
            }
            fetchNextPage({pageParam: e, ...t}={}) {
                return this.fetch({
                    ...t,
                    meta: {
                        fetchMore: {
                            direction: "forward",
                            pageParam: e
                        }
                    }
                })
            }
            fetchPreviousPage({pageParam: e, ...t}={}) {
                return this.fetch({
                    ...t,
                    meta: {
                        fetchMore: {
                            direction: "backward",
                            pageParam: e
                        }
                    }
                })
            }
            createResult(e, t) {
                var a, r, i, c, f, d;
                let {state: s} = e
                  , o = super.createResult(e, t)
                  , {isFetching: u, isRefetching: b} = o
                  , h = u && (null == (a = s.fetchMeta) ? void 0 : null == (r = a.fetchMore) ? void 0 : r.direction) === "forward"
                  , l = u && (null == (i = s.fetchMeta) ? void 0 : null == (c = i.fetchMore) ? void 0 : c.direction) === "backward";
                return {
                    ...o,
                    fetchNextPage: this.fetchNextPage,
                    fetchPreviousPage: this.fetchPreviousPage,
                    hasNextPage: n.hasNextPage(t, null == (f = s.data) ? void 0 : f.pages),
                    hasPreviousPage: n.hasPreviousPage(t, null == (d = s.data) ? void 0 : d.pages),
                    isFetchingNextPage: h,
                    isFetchingPreviousPage: l,
                    isRefetching: b && !h && !l
                }
            }
        }
        t.InfiniteQueryObserver = i
    },
    637: function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var r = a(819)
          , n = a(305)
          , i = a(4442)
          , c = a(7007);
        class f extends i.Removable {
            constructor(e) {
                super(),
                this.defaultOptions = e.defaultOptions,
                this.mutationId = e.mutationId,
                this.mutationCache = e.mutationCache,
                this.logger = e.logger || r.defaultLogger,
                this.observers = [],
                this.state = e.state || d(),
                this.setOptions(e.options),
                this.scheduleGc()
            }
            setOptions(e) {
                this.options = {
                    ...this.defaultOptions,
                    ...e
                },
                this.updateCacheTime(this.options.cacheTime)
            }
            get meta() {
                return this.options.meta
            }
            setState(e) {
                this.dispatch({
                    type: "setState",
                    state: e
                })
            }
            addObserver(e) {
                -1 === this.observers.indexOf(e) && (this.observers.push(e),
                this.clearGcTimeout(),
                this.mutationCache.notify({
                    type: "observerAdded",
                    mutation: this,
                    observer: e
                }))
            }
            removeObserver(e) {
                this.observers = this.observers.filter(t=>t !== e),
                this.scheduleGc(),
                this.mutationCache.notify({
                    type: "observerRemoved",
                    mutation: this,
                    observer: e
                })
            }
            optionalRemove() {
                this.observers.length || ("loading" === this.state.status ? this.scheduleGc() : this.mutationCache.remove(this))
            }
            continue() {
                var e, t;
                return null != (e = null == (t = this.retryer) ? void 0 : t.continue()) ? e : this.execute()
            }
            async execute() {
                var e, t, a, r, n, i, f, d, s, o, u, b, h, l, p, g, m, y, v, _;
                let w = "loading" === this.state.status;
                try {
                    if (!w) {
                        this.dispatch({
                            type: "loading",
                            variables: this.options.variables
                        }),
                        await (null == (s = (o = this.mutationCache.config).onMutate) ? void 0 : s.call(o, this.state.variables, this));
                        let e = await (null == (u = (b = this.options).onMutate) ? void 0 : u.call(b, this.state.variables));
                        e !== this.state.context && this.dispatch({
                            type: "loading",
                            context: e,
                            variables: this.state.variables
                        })
                    }
                    let h = await (()=>{
                        var e;
                        return this.retryer = c.createRetryer({
                            fn: ()=>this.options.mutationFn ? this.options.mutationFn(this.state.variables) : Promise.reject("No mutationFn found"),
                            onFail: (e,t)=>{
                                this.dispatch({
                                    type: "failed",
                                    failureCount: e,
                                    error: t
                                })
                            }
                            ,
                            onPause: ()=>{
                                this.dispatch({
                                    type: "pause"
                                })
                            }
                            ,
                            onContinue: ()=>{
                                this.dispatch({
                                    type: "continue"
                                })
                            }
                            ,
                            retry: null != (e = this.options.retry) ? e : 0,
                            retryDelay: this.options.retryDelay,
                            networkMode: this.options.networkMode
                        }),
                        this.retryer.promise
                    }
                    )();
                    return await (null == (e = (t = this.mutationCache.config).onSuccess) ? void 0 : e.call(t, h, this.state.variables, this.state.context, this)),
                    await (null == (a = (r = this.options).onSuccess) ? void 0 : a.call(r, h, this.state.variables, this.state.context)),
                    await (null == (n = (i = this.mutationCache.config).onSettled) ? void 0 : n.call(i, h, null, this.state.variables, this.state.context, this)),
                    await (null == (f = (d = this.options).onSettled) ? void 0 : f.call(d, h, null, this.state.variables, this.state.context)),
                    this.dispatch({
                        type: "success",
                        data: h
                    }),
                    h
                } catch (e) {
                    try {
                        throw await (null == (h = (l = this.mutationCache.config).onError) ? void 0 : h.call(l, e, this.state.variables, this.state.context, this)),
                        await (null == (p = (g = this.options).onError) ? void 0 : p.call(g, e, this.state.variables, this.state.context)),
                        await (null == (m = (y = this.mutationCache.config).onSettled) ? void 0 : m.call(y, void 0, e, this.state.variables, this.state.context, this)),
                        await (null == (v = (_ = this.options).onSettled) ? void 0 : v.call(_, void 0, e, this.state.variables, this.state.context)),
                        e
                    } finally {
                        this.dispatch({
                            type: "error",
                            error: e
                        })
                    }
                }
            }
